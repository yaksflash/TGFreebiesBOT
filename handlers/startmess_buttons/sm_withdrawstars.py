
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from datetime import datetime, timedelta
import sqlite3
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from loader import bot
import pytz

from aiogram.types import FSInputFile

from config import CHANNEL_USERNAME, ADMIN_USERNAME
from config import ADMIN_STARS_GROUP
smWithdrawStarsRouter = Router()

@smWithdrawStarsRouter.callback_query(F.data.startswith('startmess-withdrawstars'))
async def withdraw_stars_query(query: CallbackQuery):
    build = InlineKeyboardBuilder()

    build.button(text='5‚≠êÔ∏è (50 –∑–≤—ë–∑–¥–æ—á–µ–∫)', callback_data='changestars-5')
    build.button(text='10‚≠êÔ∏è (100 –∑–≤—ë–∑–¥–æ—á–µ–∫)', callback_data='changestars-10')

    build.button(text='üíù (15 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-15-heart')
    build.button(text='üß∏ (15 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-15-teddy')
    build.button(text='üéÅ (25 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-25-gift')
    build.button(text='üåπ (25 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-25-rose')
    build.button(text='üéÇ (50 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-50-cake')
    build.button(text='üíê (50 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-50-flowers')
    build.button(text='üçæ (50 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-50-bottle')
    build.button(text='üöÄ (50 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-50-rocket')
    build.button(text='üèÜ (100 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-100-trophy')
    build.button(text='üíç (100 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-100-ring')
    build.button(text='üíé (100 –∑–≤—ë–∑–¥)', callback_data='withdrawstars-100-gem')
    build.button(text='–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_start_menu')
    build.adjust(2)
    withdraw_gifts = build.as_markup()

    with sqlite3.connect("database.db") as database:
        cursor = database.cursor()

        cursor.execute("SELECT balance, stars FROM users WHERE id = ?", (query.from_user.id,))
        user_data = cursor.fetchall()[0]

        cursor.execute("SELECT count FROM starsbank")
        starsbank = cursor.fetchone()[0]

    text = f'''
–ö–∞–∑–Ω–∞ –±–æ—Ç–∞: {starsbank} ‚≠êÔ∏è

–í–∞—à –±–∞–ª–∞–Ω—Å:
--- {user_data[1]} ‚≠êÔ∏è
--- {user_data[0]} ‚ú® (~{int(user_data[0]/10)} –∑–≤—ë–∑–¥)

<i>–ö–∞–∑–Ω–∞ –æ–±—â–∞—è —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—É–º–º—É –∑–≤—ë–∑–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –∑–≤—ë–∑–¥–æ—á–∫–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≤–µ—Ä—à–∏—Ç –æ–±–º–µ–Ω, –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å—Å—è</i>
'''
    
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id, text=text, parse_mode=ParseMode.HTML, reply_markup=withdraw_gifts)

    

@smWithdrawStarsRouter.callback_query(F.data.startswith('changestars'))
async def changestars_query(query: CallbackQuery):
    text, count = str(query.data).split("-")
    count = int(count)

    with sqlite3.connect("database.db") as database:
        cursor = database.cursor()

        cursor.execute("SELECT balance, stars FROM users WHERE id = ?", (query.from_user.id,))
        user_data = cursor.fetchall()[0]

        cursor.execute("SELECT count FROM starsbank")
        starsbank = cursor.fetchone()[0]

        if user_data[0] < count * 10:
            error_text = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥–æ—á–µ–∫! ({user_data[0]}/{count*10})"
            await bot.edit_message_text(text=error_text, chat_id=query.message.chat.id, message_id=query.message.message_id)
            return
        elif starsbank < count:
            error_text = f"–í –∫–∞–∑–Ω–µ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! ({starsbank}/{count})"
            await bot.edit_message_text(text=error_text, chat_id=query.message.chat.id, message_id=query.message.message_id)
            return
        
        cursor.execute("UPDATE starsbank SET count = ?", (starsbank-count,))
        cursor.execute("UPDATE users SET stars = ? WHERE id = ?", (user_data[1] + count, query.from_user.id))
        cursor.execute("UPDATE users SET balance = ? WHERE id = ?", (user_data[0] - count * 10, query.from_user.id))
        await query.answer("–£—Å–ø–µ—à–Ω–æ!")


        


@smWithdrawStarsRouter.callback_query(F.data.startswith('withdrawstars'))
async def changestars_query(query: CallbackQuery):
    text, count, type = str(query.data).split("-")

    if type == "heart":
        emoji = "üíù"
    elif type == "teddy":
        emoji = "üß∏"
    elif type == "gift":
        emoji = "üéÅ"
    elif type == "rose":
        emoji = "üåπ"
    elif type == "cake":
        emoji = "üéÇ"
    elif type == "flowers":
        emoji = "üíê"
    elif type == "bottle":
        emoji = "üçæ"
    elif type == "rocket":
        emoji = "üöÄ"
    elif type == "trophy":
        emoji = "üèÜ"
    elif type == "ring":
        emoji = "üíç"
    elif type == "gem":
        emoji = "üíé"
    else:
        await bot.send_message(chat_id=query.message.chat.id, text="ERROR!!! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–∏—Ñ—Ç")
        return

    count = int(count)
    with sqlite3.connect("database.db") as database:
        cursor = database.cursor()

        cursor.execute("SELECT balance, stars FROM users WHERE id = ?", (query.from_user.id,))
        user_data = cursor.fetchall()[0]


        if user_data[1] < count:
            error_text = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! ({user_data[1]}/{count})"
            await bot.edit_message_text(text=error_text, chat_id=query.message.chat.id, message_id=query.message.message_id)
            return
        
        if not query.from_user.username:
            error_text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è telegram!"
            await bot.edit_message_text(text=error_text, chat_id=query.message.chat.id, message_id=query.message.message_id)
            return
        
        await bot.send_message(chat_id=query.message.chat.id, text=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Å–≤–æ–π @username! –ó–≤—ë–∑–¥—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: @{query.from_user.username}. –ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –∑–≤—ë–∑–¥—ã –≤–∞–º –Ω–µ –ø—Ä–∏–¥—É—Ç!")
        cursor.execute("INSERT INTO transactions (id, type, amount) VALUES (?, ?, ?)", (query.from_user.id, "withdraw", count*10))
        cursor.execute("UPDATE users SET stars = ? WHERE id = ?", (user_data[1] - count, query.from_user.id))
        database.commit
    
    admin_group_text = f'''
–ó–∞–ø—Ä–æ—Å–∏–ª –∑–≤—ë–∑–¥—ã: @{query.from_user.username}
ID: {query.from_user.id}

–°—É–º–º–∞: {count} ‚≠êÔ∏è
–ü–æ–¥–∞—Ä–æ–∫: {type} ({emoji})
'''
    build = InlineKeyboardBuilder()

    build.button(text='–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', callback_data=f'admwithdraw-commit-{query.from_user.id}-{count}')
    build.button(text='–í–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞', callback_data=f'admwithdraw-cancel-{query.from_user.id}-{count}')

    build.adjust(2)

    admin_group_markup = build.as_markup()

    await bot.send_message(chat_id=ADMIN_STARS_GROUP, text=admin_group_text, reply_markup=admin_group_markup)


